/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.93
 * Generated at: 2025-07-02 08:47:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

	int totalRecord = 26;
	int pageSize = 10;
	int currentPage = 1;

	String paramPage = request.getParameter("currentPage");
	if (paramPage != null) {
		currentPage = Integer.parseInt(paramPage);
	}

	int totalpage = (int)Math.ceil((float)totalRecord / pageSize);
	int blockSize = 10;
	int firstPage = 10*((currentPage-1)/blockSize) + 1; //블럭당 시작페이지
	int lastPage = firstPage + (blockSize -1); //블럭당 마지막페이

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("<style>\n");
      out.write("table {\n");
      out.write("  border-collapse: collapse;\n");
      out.write("  width: 100%;\n");
      out.write("  border: 1px solid #ddd;\n");
      out.write("}\n");
      out.write("th, td {\n");
      out.write("  text-align: left;\n");
      out.write("  padding: 16px;\n");
      out.write("}\n");
      out.write("tr:nth-child(even) {\n");
      out.write("  background-color: #f2f2f2;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".pageNum{\n");
      out.write("	font-size : 27px;\n");
      out.write("	font-weight:bold;\n");
      out.write("	color: red;\n");
      out.write("}\n");
      out.write("</style>	\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<h2>총 레코드 수: ");
      out.print( totalRecord );
      out.write("</h2>\n");
      out.write("<h2>총 페이지 수: ");
      out.print( totalpage );
      out.write("</h2>\n");
      out.write("<h2>총 블록 크기: ");
      out.print( blockSize );
      out.write("</h2>\n");
      out.write("<h2>현재 페이지: ");
      out.print( currentPage );
      out.write("</h2>\n");
      out.write("<h2>첫번째 크기 : ");
      out.print( firstPage );
      out.write("</h2>\n");
      out.write("<h2>마지막 크기: ");
      out.print( lastPage );
      out.write("</h2>\n");
      out.write("\n");
      out.write("<table>\n");
      out.write("  <tr>\n");
      out.write("    <th>No</th>\n");
      out.write("    <th>Last Name</th>\n");
      out.write("    <th>Points</th>\n");
      out.write("  </tr>\n");
      out.write("  ");
 for(int i = 0; i < pageSize; i++) { 
       int recordNo = (currentPage - 1) * pageSize + i + 1;
       if (recordNo > totalRecord) break;
  
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td>");
      out.print( recordNo );
      out.write("</td>\n");
      out.write("    <td>Smith</td>\n");
      out.write("    <td>50</td>\n");
      out.write("  </tr>\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("  	<td colspan=\"3\" align=\"center\">\n");
      out.write("  	");
if(firstPage - 1 > 0 ){ 
      out.write("\n");
      out.write(" 	  <a href=\"?currentPage=");
      out.print(firstPage - 1 );
      out.write("\">⬅</a>\n");
      out.write("  	  ");
}else{ 
      out.write("\n");
      out.write("  	  <a href=\"javascript:alert('이전페이지가 없습니다.');");
      out.print(firstPage - 1 );
      out.write("\">⬅</a>\n");
      out.write("  	  ");
} 
      out.write("\n");
      out.write("  	  ");
 
  		for (int i = firstPage; i <= lastPage; i++) {
  	  
      out.write("\n");
      out.write("  	    <a ");
if(currentPage == i){
      out.write("class =\"pageNum\" ");
}
      out.write(" href=\"?currentPage=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print( i );
      out.write("]</a>\n");
      out.write("  	  ");
 } 
      out.write("\n");
      out.write("  	  <a href=\"?currentPage=");
      out.print(lastPage + 1 );
      out.write("\">➤</a>\n");
      out.write("  	</td>\n");
      out.write("  </tr>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
